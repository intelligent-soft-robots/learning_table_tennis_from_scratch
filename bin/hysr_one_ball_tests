#!/usr/bin/env python3

import sys,random
import o80
from lightargs import BrightArgs,FileExists
from learning_table_tennis_from_scratch.hysr_one_ball import HysrOneBall,HysrOneBallConfig
from learning_table_tennis_from_scratch.rewards import JsonReward


def execute(accelerated_time,
            reward_config_path,
            hysr_config_path):

    hysr_config = HysrOneBallConfig.from_json(hysr_config_path)
    reward_function = JsonReward.get(reward_config_path)
    algo_time_step = hysr_config.algo_time_step

    hysr = HysrOneBall(hysr_config,
                       accelerated_time,
                       reward_function)

    # for all tests, the actions are high pressures
    # on all muscles
    pressures = [[20000,20000]*4]
    pressures = [p for sublist in pressures for p in sublist]

    ###################
    # Testing rewards #
    ###################

    # fixed position, no contact
    
    def _fixed_position(ball_position):
        hysr.set_ball_behavior(fixed=ball_position)
        hysr.reset()
        frequency_manager = o80.FrequencyManager(1.0/algo_time_step)
        for episode in range(5):
            hysr.step(pressures)
            if not accelerated_time:
                waited = frequency_manager.wait()
                if waited<0:
                    print("! warning ! failed to maintain algorithm frequency")
        hysr.force_episode_over()
        _,reward,__=hysr.step(pressures)
        return reward

    def _commented():
        print("ball staying far from racket")
        reward = _fixed_position([1.2,2.7,0.17])
        print("\t\treward: ",reward)

        print("repeating")
        reward = _fixed_position([1.2,2.7,0.17])
        print("\t\treward: ",reward)
        
        print("ball getting closer to racket")
        reward = _fixed_position([1.2,1.7,0.17])
        print("\t\treward: ",reward)

        print("ball getting closer to racket")
        reward = _fixed_position([1.2,1.2,0.17])
        print("\t\treward: ",reward)

        print("repeating")
        reward = _fixed_position([1.2,1.2,0.17])
        print("\t\treward: ",reward)
        
        print("ball getting closer to racket")
        reward = _fixed_position([1.2,0.5,0.17])
        print("\t\treward: ",reward)


    # moving

    def _moving(ball_start,ball_end,velocity,
                secondary_target=None):
        hysr.set_ball_behavior(line=(ball_start,
                                     ball_end,
                                     velocity))
        hysr.reset()
        frequency_manager = o80.FrequencyManager(1.0/algo_time_step)
        for episode in range(300):
            hysr.step(pressures)
            if not accelerated_time:
                waited = frequency_manager.wait()
                if waited<0:
                    print("! warning ! failed to maintain algorithm frequency")
        hysr.force_episode_over()
        _,reward,__=hysr.step(pressures)
        return reward,hysr.contact_occured()

    def _commented():
        print("ball flying far from racket")
        reward,contact_occured = _moving([1.5,2.7,0.17],
                         [1.5,-1.0,0.17],
                         2.0)
        print("\t\treward: ",reward,"contact occured:",contact_occured)

        print("repeat")
        reward = _moving([1.5,2.7,0.17],
                         [1.5,-1.0,0.17],
                         2.0)
        print("\t\treward: ",reward,"contact occured:",contact_occured)

    print("ball flying closer to racket")
    reward,contact_occured = _moving([1.0,2.7,0.17],
                     [1.0,-1.0,0.17],
                     2.0)
    print("\t\treward: ",reward,"contact occured:",contact_occured)

    print("ball flying to racket, an bouncing")
    reward,contact_occured = _moving([0.75,2.7,0.25],
                     [0.75,-1.0,0.25],
                     2.0)
    print("\t\treward: ",reward,"contact occured:",contact_occured)
    
    print("ball flying to racket, and flying far to target")
    reward,contact_occured = _moving([0.75,2.7,0.25],
                                 [0.75,-1.0,0.25],
                                 2.0)
    print("\t\treward: ",reward,"contact occured:",contact_occured)

    
    

    
def _configure():
    config = BrightArgs(str("hysr 'tests', but output requires expert check"))
    config.add_operation("accelerated",
                         "if used, start_robot_accelerated must have been started.")
    config.add_option("reward_config_file",
                      JsonReward.default_path(),
                      "reward configuration file",
                      str,
                      integrity_checks= [FileExists()])
    config.add_option("hysr_config_file",
                      HysrOneBallConfig.default_path(),
                      "hysr configuration file",
                      str,
                      integrity_checks= [FileExists()])
    change_all=False
    finished  = config.dialog(change_all,sys.argv[1:])
    if not finished:
        return None
    return config


def _run():
    config = _configure()
    if config is None:
        return
    execute(config.accelerated,
            config.reward_config_file,
            config.hysr_config_file)
    
if __name__ == "__main__":
    _run()
