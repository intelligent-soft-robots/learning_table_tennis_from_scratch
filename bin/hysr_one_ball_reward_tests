#!/usr/bin/env python3

import sys,random
import o80
from lightargs import BrightArgs,FileExists
from learning_table_tennis_from_scratch.hysr_one_ball import HysrOneBall,HysrOneBallConfig
from learning_table_tennis_from_scratch.rewards import JsonReward


def execute(accelerated_time,
            reward_config_path,
            hysr_config_path):

    hysr_config = HysrOneBallConfig.from_json(hysr_config_path)
    reward_function = JsonReward.get(reward_config_path)
    algo_time_step = hysr_config.algo_time_step

    hysr = HysrOneBall(hysr_config,
                       accelerated_time,
                       reward_function)

    # for all tests, the actions are high pressures
    # on all muscles
    pressures = [[20000,20000]*4]
    pressures = [p for sublist in pressures for p in sublist]

    ###################################
    # fixed ball position, no contact #
    ###################################
    
    def _fixed_position(ball_position):
        hysr.set_ball_behavior(fixed=ball_position)
        hysr.reset()
        frequency_manager = o80.FrequencyManager(1.0/algo_time_step)
        for episode in range(5):
            hysr.step(pressures)
            if not accelerated_time:
                waited = frequency_manager.wait()
                if waited<0:
                    print("! warning ! failed to maintain algorithm frequency")
        hysr.force_episode_over()
        _,reward,__=hysr.step(pressures)
        return reward

    
    print("ball staying far from racket")
    reward = _fixed_position([1.2,2.7,0.17])
    print("\t\treward: ",reward)

    print("repeating")
    reward = _fixed_position([1.2,2.7,0.17])
    print("\t\treward: ",reward)

    print("ball getting closer to racket")
    reward = _fixed_position([1.2,1.7,0.17])
    print("\t\treward: ",reward)

    print("ball getting closer to racket")
    reward = _fixed_position([1.2,1.2,0.17])
    print("\t\treward: ",reward)

    print("repeating")
    reward = _fixed_position([1.2,1.2,0.17])
    print("\t\treward: ",reward)

    print("ball getting closer to racket")
    reward = _fixed_position([1.2,0.5,0.17])
    print("\t\treward: ",reward)

    
    ###########################
    # moving ball, no contact #
    ###########################


    def _moving(ball_start,ball_end,velocity,
                contact_ball_end=None):
        # setting the ball to go to a straight line
        hysr.set_ball_behavior(line=(ball_start,
                                     ball_end,
                                     velocity))
        # new episode
        hysr.reset()
        frequency_manager = o80.FrequencyManager(1.0/algo_time_step)
        # if contact_ball_end is not None, the ball should be reloaded,
        # tracking if this occured
        reloaded=False
        for episode in range(600):
            hysr.step(pressures)
            if not accelerated_time:
                waited = frequency_manager.wait()
                if waited<0:
                    print("! warning ! failed to maintain algorithm frequency")
            # if contact occurs and contact ball end is set, the
            # ball should be set to "fly" toward this next position
            if (not reloaded) and contact_ball_end and hysr.contact_occured():
                # contacts active for some time
                for _ in range(10):
                    hysr.step(pressures)
                # after contact, mujoco takes over the ball trajectory (i.e. gravity),
                # resetting the contact allows to keep control of the ball
                hysr.reset_contact()
                # creating a ball behavior corresponding to a straight line
                # between current ball position and contact_ball_end
                ball_position = hysr.get_ball_position()
                hysr.set_ball_behavior(line=(ball_position,
                                             contact_ball_end,
                                             velocity))
                # applying the ball behavior
                hysr.load_ball(burst=False)
                # making sure this happens only once
                reloaded=True
        hysr.force_episode_over()
        _,reward,__=hysr.step(pressures)
        return reward,hysr.contact_occured()

    
    print("ball flying far from racket")
    reward,contact_occured = _moving([1.5,2.7,0.17],
                                     [1.5,-1.0,0.17],
                                     2.0)
    print("\t\treward: ",reward,"contact occured:",contact_occured)

    print("repeat")
    reward,contact_occured = _moving([1.5,2.7,0.17],
                                     [1.5,-1.0,0.17],
                                     2.0)
    print("\t\treward: ",reward,"contact occured:",contact_occured)

    print("ball flying closer to racket")
    reward,contact_occured = _moving([1.0,2.7,0.17],
                                    [1.0,-1.0,0.17],
                                     2.0)
    print("\t\treward: ",reward,"contact occured:",contact_occured)


    ########################
    # moving ball, contact #
    ########################
    
    
    print("ball flying to racket, and bouncing")
    reward,contact_occured = _moving([0.75,2.7,0.25],
                     [0.75,-1.0,0.25],
                     2.0)
    print("\t\treward: ",reward,"contact occured:",contact_occured)

    print("repeat")
    reward,contact_occured = _moving([0.75,2.7,0.25],
                     [0.75,-1.0,0.25],
                     2.0)
    print("\t\treward: ",reward,"contact occured:",contact_occured)
    
    print("ball flying to racket, then flying far to target")
    reward,contact_occured = _moving([0.75,2.7,0.25],
                                     [0.75,-1.0,0.25],
                                     2.0,
                                     contact_ball_end=[0.6,1.5,-1.0])
    print("\t\treward: ",reward,"contact occured:",contact_occured)
    
    print("ball flying to racket, then flying closer to target")
    reward,contact_occured = _moving([0.75,2.7,0.25],
                                     [0.75,-1.0,0.25],
                                     2.0,
                                     contact_ball_end=[0.5,2.7,-1.0])
    print("\t\treward: ",reward,"contact occured:",contact_occured)

    print("repeat")
    reward,contact_occured = _moving([0.75,2.7,0.25],
                                     [0.75,-1.0,0.25],
                                     2.0,
                                     contact_ball_end=[0.5,2.7,-1.0])
    print("\t\treward: ",reward,"contact occured:",contact_occured)

    print("ball flying to racket, then flying even closer to target")
    reward,contact_occured = _moving([0.75,2.7,0.25],
                                     [0.75,-1.0,0.25],
                                     2.0,
                                     contact_ball_end=[0.45,4.1,-1.0])
    print("\t\treward: ",reward,"contact occured:",contact_occured)

    print("ball flying to racket, then flying exactly at the target")
    reward,contact_occured = _moving([0.75,2.7,0.25],
                                     [0.75,-1.0,0.25],
                                     2.0,
                                     contact_ball_end=[0.45,2.7,-0.45])
    print("\t\treward: ",reward,"contact occured:",contact_occured)
    
    

    
def _configure():
    config = BrightArgs(str("hysr 'tests', but output requires expert check"))
    config.add_operation("accelerated",
                         "if used, start_robot_accelerated must have been started.")
    config.add_option("reward_config_file",
                      JsonReward.default_path(),
                      "reward configuration file",
                      str,
                      integrity_checks= [FileExists()])
    config.add_option("hysr_config_file",
                      HysrOneBallConfig.default_path(),
                      "hysr configuration file",
                      str,
                      integrity_checks= [FileExists()])
    change_all=False
    finished  = config.dialog(change_all,sys.argv[1:])
    if not finished:
        return None
    return config


def _run():
    config = _configure()
    if config is None:
        return
    execute(config.accelerated,
            config.reward_config_file,
            config.hysr_config_file)
    
if __name__ == "__main__":
    _run()
