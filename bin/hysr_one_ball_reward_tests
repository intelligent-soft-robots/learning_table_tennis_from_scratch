#!/usr/bin/env python3

import sys, random, time
import o80
from lightargs import BrightArgs, FileExists
from learning_table_tennis_from_scratch.hysr_one_ball import (
    HysrOneBall,
    HysrOneBallConfig,
)
from learning_table_tennis_from_scratch.rewards import JsonReward

def execute(reward_config_path, hysr_config_path):

    hysr_config = HysrOneBallConfig.from_json(hysr_config_path)
    reward_function = JsonReward.get(reward_config_path)
    algo_time_step = hysr_config.algo_time_step
    accelerated_time = hysr_config.accelerated_time

    hysr = HysrOneBall(hysr_config, reward_function)

    # for all tests, the actions are high pressures
    # on all muscles
    pressures = [[20000, 20000] * 4]
    pressures = [p for sublist in pressures for p in sublist]

    ###################################
    # fixed ball position, no contact #
    ###################################
    def _fixed_position(ball_position):
        hysr.set_ball_behavior(line=(ball_position, ball_position, 5000))
        hysr.reset()
        frequency_manager = o80.FrequencyManager(1.0 / algo_time_step)
        for episode in range(5):
            hysr.step(pressures)
            if not accelerated_time:
                waited = frequency_manager.wait()
                if waited < 0:
                    print("! warning ! failed to maintain algorithm frequency")
        hysr.force_episode_over()
        _, reward, __ = hysr.step(pressures)
        return reward
    print("ball staying far from racket")
    reward = _fixed_position([1.2, 2.7, 0.17])
    print("\t\treward: ", reward)

    print("repeating")
    reward = _fixed_position([1.2, 2.7, 0.17])
    print("\t\treward: ", reward)

    print("ball getting closer to racket")
    reward = _fixed_position([1.2, 1.7, 0.17])
    print("\t\treward: ", reward)

    print("ball getting closer to racket")
    reward = _fixed_position([1.2, 1.2, 0.17])
    print("\t\treward: ", reward)

    print("repeating")
    reward = _fixed_position([1.2, 1.2, 0.17])
    print("\t\treward: ", reward)

    print("ball getting closer to racket")
    reward = _fixed_position([1.2, 0.5, 0.17])
    print("\t\treward: ", reward)

    ###########################
    # moving ball, no contact #
    ###########################
    def _moving(ball_start, ball_end, duration_ms, contact_ball_end=None):
        # setting the ball to go to a straight line
        hysr.set_ball_behavior(line=(ball_start, ball_end, duration_ms))
        # new run
        hysr.reset()
        frequency_manager = o80.FrequencyManager(1.0 / algo_time_step)
        # if contact_ball_end is not None, the ball should be reloaded,
        # tracking if this occured
        reloaded = False
        nb_frequency_fail = 0
        while True:
            _, reward, episode_over = hysr.step(pressures)
            if episode_over:
                break
            if not accelerated_time:
                waited = frequency_manager.wait()
                if waited < 0:
                    nb_frequency_fail += 1
            # if contact occurs and contact ball end is set, the
            # ball should be set to "fly" toward this next position
            if (not reloaded) and contact_ball_end and hysr.contact_occured():
                # letting the ball falling out of contact zone
                for _ in range(5):
                    hysr.step(pressures)
                # creating a ball behavior corresponding to a straight line
                # between current ball position and contact_ball_end
                ball_position = hysr.get_ball_position()
                hysr.set_ball_behavior(
                    line=(ball_position, contact_ball_end, duration_ms)
                )
                hysr.load_ball()
                # after contact, mujoco takes over the ball trajectory (i.e. gravity),
                # resetting the contact allows to keep control of the ball
                hysr.reset_contact()
                reloaded = True
        print(
            "\t\treward: *",
            reward,
            "* | contact occured:",
            hysr.contact_occured(),
            " | nb of time the frequency was not maintained:",
            nb_frequency_fail,
        )
    print("ball flying far from racket")
    _moving([1.5, 2.7, 0.17], [1.5, -1.0, 0.17], 3000)

    print("repeat")
    _moving([1.5, 2.7, 0.17], [1.5, -1.0, 0.17], 3000)

    print("ball flying closer to racket")
    _moving([1.0, 2.7, 0.17], [1.0, -1.0, 0.17], 3000)

    ########################
    # moving ball, contact #
    ########################

    print("ball flying to racket, and bouncing")
    _moving([0.75, 2.7, 0.25], [0.75, -1.0, 0.25], 3000)

    print("repeat")
    _moving([0.75, 2.7, 0.25], [0.75, -1.0, 0.25], 3000)

    print("ball flying to racket, then flying far to target")
    _moving(
        [0.75, 2.7, 0.25], [0.75, -1.0, 0.25], 3000, contact_ball_end=[0.6, 1.5, -1.0]
    )

    print("ball flying to racket, then flying closer to target")
    _moving(
        [0.75, 2.7, 0.25], [0.75, -1.0, 0.25], 3000, contact_ball_end=[0.5, 2.7, -1.0]
    )

    print("repeat")
    _moving(
        [0.75, 2.7, 0.25], [0.75, -1.0, 0.25], 3000, contact_ball_end=[0.5, 2.7, -1.0]
    )

    print("ball flying to racket, then flying even closer to target")
    _moving(
        [0.75, 2.7, 0.25], [0.75, -1.0, 0.25], 3000, contact_ball_end=[0.45, 4.1, -1.0]
    )

    print("ball flying to racket, then flying even (even) closer to target")
    _moving(
        [0.75, 2.7, 0.25],
        [0.75, -1.0, 0.25],
        3000,
        contact_ball_end=[0.45, 2.71, -0.45],
    )

    print("ball flying to racket, then flying even (even) closer to target, but faster")
    _moving(
        [0.75, 2.7, 0.25],
        [0.75, -1.0, 0.25],
        2000,
        contact_ball_end=[0.45, 2.71, -0.45],
    )

    print("ball flying to racket, then flying exactly at the target")
    _moving(
        [0.75, 2.7, 0.25], [0.75, -1.0, 0.25], 3000, contact_ball_end=[0.45, 2.7, -0.45]
    )

def _configure():
    config = BrightArgs(str("hysr dummy demo for sanity check of reward function(s)"))
    config.add_option(
        "reward_config_file",
        JsonReward.default_path(),
        "reward configuration file",
        str,
        integrity_checks=[FileExists()],
    )
    config.add_option(
        "hysr_config_file",
        HysrOneBallConfig.default_path(),
        "hysr configuration file",
        str,
        integrity_checks=[FileExists()],
    )
    change_all = False
    finished = config.dialog(change_all, sys.argv[1:])
    if not finished:
        return None
    return config

def _run():
    config = _configure()
    if config is None:
        return
    execute(config.reward_config_file, config.hysr_config_file)

if __name__ == "__main__":
    _run()
