#!/usr/bin/env python3

import sys, random, logging
import o80
from lightargs import BrightArgs, FileExists
from learning_table_tennis_from_scratch.hysr_one_ball import (
    HysrOneBall,
    HysrOneBallConfig,
)
from learning_table_tennis_from_scratch.rewards import JsonReward
from learning_table_tennis_from_scratch.jsonconfig import get_json_config


def execute(reward_config_path, hysr_config_path):

    hysr_config = HysrOneBallConfig.from_json(hysr_config_path)
    reward_function = JsonReward.get(reward_config_path)
    algo_time_step = hysr_config.algo_time_step

    hysr = HysrOneBall(hysr_config, reward_function)

    hysr.reset()
    frequency_manager = o80.FrequencyManager(1.0 / algo_time_step)
    pressures = [
        [random.randrange(14000, 20000), random.randrange(14000, 20000)]
        for _ in range(4)
    ]
    pressure_max_diff = 300
    nb_episodes = 3

    for episode in range(nb_episodes):

        print(episode + 1, " / ", nb_episodes)
        running = True

        while running:

            for dof in [3]:
                for ago in range(2):
                    pressure = pressures[dof][ago]
                    diff = random.randrange(-pressure_max_diff, pressure_max_diff)
                    pressure += diff
                    pressure = max(min(pressure, 20000), 14000)
                    pressures[dof][ago] = pressure

            pressures_ = [p for sublist in pressures for p in sublist]
            observation, reward, reset = hysr.step(pressures_)

            if not hysr_config.accelerated_time:
                waited = frequency_manager.wait()

            running = not reset

        hysr.reset()
        frequency_manager = o80.FrequencyManager(1.0 / algo_time_step)

    hysr.close()


def _configure():
    files = get_json_config(expected_keys=["reward_config", "hysr_config"])

    return files["reward_config"], files["hysr_config"]


def _run():
    logging.basicConfig(format="hysr_one_ball_random | %(message)s", level=logging.INFO)
    reward_config, hysr_config = _configure()
    print(
        "\nusing configuration files:\n- {}\n- {}\n".format(reward_config, hysr_config)
    )
    execute(reward_config, hysr_config)


if __name__ == "__main__":
    _run()
