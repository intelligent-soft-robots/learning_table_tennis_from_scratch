#!/usr/bin/env python3

import sys, random, logging
import o80, context
from lightargs import BrightArgs, FileExists
from learning_table_tennis_from_scratch.hysr_one_ball import (
    HysrOneBall,
    HysrOneBallConfig
)
from learning_table_tennis_from_scratch.rewards import JsonReward
from learning_table_tennis_from_scratch.jsonconfig import get_json_config

def execute(reward_config_path, hysr_config_path):

    hysr_config = HysrOneBallConfig.from_json(hysr_config_path)
    reward_function = JsonReward.get(reward_config_path)
    algo_time_step = hysr_config.algo_time_step

    hysr = HysrOneBall(hysr_config, reward_function)

    trajectory_index = 49
    print(
        "using ball trajectory file: ",
        context.BallTrajectories().get_file_name(trajectory_index),
    )
    hysr.set_ball_behavior(index=trajectory_index)

    hysr.reset()

    frequency_manager = o80.FrequencyManager(1.0 / algo_time_step)
    swing_posture = [[14000, 22000], [14000, 22000], [17000, 13000], [14000, 16000]]
    pressures = [p for sublist in swing_posture for p in sublist]

    for episode in range(5):
        print("EPISODE", episode)
        running = True
        while running:
            observation, reward, reset = hysr.step(pressures)
            if not hysr_config.accelerated_time:
                waited = frequency_manager.wait()
                if waited < 0:
                    print("! warning ! failed to maintain algorithm frequency")
            if reset:
                print("\treward:", reward)
            running = not reset
        hysr.reset()
        frequency_manager = o80.FrequencyManager(1.0 / algo_time_step)

    hysr.close()

def _configure():
    files = get_json_config(expected_keys=["reward_config",
                                           "hysr_config"])
    
    return files["reward_config"],files["hysr_config"]
    
def _run():
    logging.basicConfig(format='hysr_one_ball_swing | %(message)s',level=logging.INFO)
    reward_config,hysr_config = _configure()
    print("\nusing configuration files:\n- {}\n- {}\n".format(reward_config,
                                                              hysr_config))
    execute(reward_config,hysr_config)

if __name__ == "__main__":
    _run()
