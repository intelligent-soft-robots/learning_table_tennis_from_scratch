#!/usr/bin/env python3

import logging
import o80
import context
from learning_table_tennis_from_scratch.hysr_one_ball import (
    HysrOneBall,
    HysrOneBallConfig,
)
from learning_table_tennis_from_scratch.rewards import JsonReward
from learning_table_tennis_from_scratch.jsonconfig import get_json_config


def execute(reward_config_path, hysr_config_path):

    hysr_config = HysrOneBallConfig.from_json(hysr_config_path)
    reward_function = JsonReward.get(reward_config_path)
    algo_time_step = hysr_config.algo_time_step

    hysr = HysrOneBall(hysr_config, reward_function)

    trajectory_index = 49
    hysr.set_ball_behavior(index=trajectory_index)

    hysr.reset()

    frequency_manager = o80.FrequencyManager(1.0 / algo_time_step)

    swing_posture = [18000, 17000, 16800, 19100, 18700, 17300, 18000, 18000]
    swing_pressures = [0] * 8 # [p for sublist in swing_posture for p in sublist]
    wait_pressures = [0] * 8 #[[0.0, 0.0]] * 4  #[p for sublist in hysr_config.reference_posture for p in sublist]

    for episode in range(3):
        print("EPISODE", episode)
        running = True
        nb_steps = 0
        while running:
            if nb_steps < 60:
                observation, reward, reset = hysr.step(wait_pressures)
            else:
                observation, reward, reset = hysr.step(swing_pressures)
            if not hysr_config.accelerated_time:
                waited = frequency_manager.wait()
                if waited < 0:
                    print("! warning ! failed to maintain algorithm frequency")
            if reset:
                print("\treward:", reward)
            running = not reset
            nb_steps += 1
        hysr.reset()
        frequency_manager = o80.FrequencyManager(1.0 / algo_time_step)

    hysr.close()


def _configure():
    files = get_json_config(expected_keys=["reward_config", "hysr_config"])

    return files["reward_config"], files["hysr_config"]


def _run():
    logging.basicConfig(format="hysr_one_ball_swing | %(message)s", level=logging.INFO)
    reward_config, hysr_config = _configure()
    print(
        "\nusing configuration files:\n- {}\n- {}\n".format(reward_config, hysr_config)
    )
    execute(reward_config, hysr_config)


if __name__ == "__main__":
    _run()
