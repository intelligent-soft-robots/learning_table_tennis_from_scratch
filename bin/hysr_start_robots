#! /bin/bash

# This executable starts all instances of pam_mujoco.
#
# It can can be called either with the path to a JSON config file as argument or
# without arguments, in which case it searches for a JSON file in the current
# working directory.
# This JSON file should have an entry "hysr_config", pointing to an other JSON
# file. This other JSON file should have the entries:
# extra_balls_set : indication if an instance of pam_mujoco for
#                   extra balls should be started
# graphics : indication if an instance pam_mujoco with graphics
#            should be started
# xterms: indication if the instances of pam_mujoco should be
#         started in the current terminal, or in separated terminals
#
# Typically, hysr_start_robots will be started in a folder,
# then a "hysr executable" (e.g. hysr_one_ball_rl) will be started
# from the same folder, so both use the same config files.

# exit if there is any error (e.g. if the config file is invalid)
set -e


if [ $# == 0 ]; then
    # list json files in current directory
    json_files=( $(ls *.json) )

    # exiting if no json file
    if [ ! $? -eq 0 ]; then
        >&2 echo "failed to find a json file in the current directory"
        exit 1
    fi

    nb_json_files=${#json_files[@]}

    # exiting if more than 1 json file
    if [ ! $nb_json_files -eq 1 ]; then
        >&2 echo "failed more than one json file in the current directory"
        >&2 echo "${json_files[@]}"
        exit 1
    fi

    # only 1 json file, going forward
    json_file=$(ls *.json)

elif [ $# == 1 ]; then
    json_file="$1"
    if [ ! -e "${json_file}" ]
    then
        >&2 echo "given config file '${json_file}' does not exist."
        exit 1
    fi
else
    >&2 echo "ERROR: Invalid number of arguments."
    >&2 echo "Usage:\t $0 [<config_file>]"
    exit 1
fi
echo "Use config file ${json_file}"


# reading the "hysr_config" entry from it
hysr_config=$(jq -r .hysr_config ${json_file})

# if not found, exit
if [ "$hysr_config" = "null" ]; then
    >&2 echo "failed to find the key hysr_config in ${json_file}"
    exit 1
fi

# the file "hysr_config" should exists (as relative or absolute path)
relative_path=$(pwd)/${hysr_config}
if [ -f ${relative_path} ]; then
    hysr_config=${relative_path}
fi
if [ ! -f ${hysr_config} ]; then
    >&2 echo "failed to find ${hysr_config} (tested both relative and absolute path)"
fi

# checking from hysr_config if extra ball sets are active
extra_balls=$(jq -r .extra_balls_sets ${hysr_config})

# if no "extra_balls_sets" key in hysr_config, exit
if [ "$extra_balls" = "null" ]; then
    >&2 echo "failed to find the key extra_balls_sets in ${hysr_config}"
    exit 1
fi

# cast extra_balls from int to bool
if [ $extra_balls -gt 0 ]; then
    extra_balls=true
else
    extra_balls=false
fi

# checking if graphics set to true in hysr_config
graphics=$(jq -r .graphics ${hysr_config})

# if no "graphics" key in hysr_config, exit
if [ "$graphics" = "null" ]; then
    >&2 echo "failed to find the key graphics in ${hysr_config}"
    exit 1
fi

# checking if xterms set to true in hysr_config
xterms=$(jq -r .xterms ${hysr_config})

# if no "xterms" key in hysr_config, exit
if [ "$xterms" = "null" ]; then
    >&2 echo "failed to find the key xterms in ${hysr_config}"
    exit 1
fi

# building the command


if [ "$xterms" = true ]; then
    # all mujoco instances started in a
    # separate terminal
    launch_pam_mujoco="launch_pam_mujoco_xterm"
else
    # all instances started in the current terminal
    # (mixed output)
    launch_pam_mujoco="launch_pam_mujoco"
fi

# pseudo-real and simulation used in any case
mujoco_ids=( "pseudo-real" "simulation" )

# adding extra balls (first set only) 
if [ "$extra_balls" = true ]; then
    mujoco_ids+=("extra_balls_0")
fi

# adding graphics
if [ "$graphics" = true ]; then
    # we add an instance of mujoco (that will have graphics) 
    mujoco_ids+=("visualization")
    # we add an executable that will forward data from
    # simulation (and extra_balls) to visualization
    visualization="& hysr_visualization"
else
    visualization=""
fi

if [ "$graphics" = true ]; then
    command_visualization="hysr_visualization"
else
    command_visualization=""
fi

# running command

echo ""
echo "Starting Mujoco instances."
echo "Press Ctrl+C or call hysr_stop to stop all instances."
echo ""

# run all sub-processes and collect their PIDs for monitoring
pids=()

for mujoco_id in "${mujoco_ids[@]}"; do
    ${launch_pam_mujoco} "${mujoco_id}" &
    pids+=($!)
    echo "Run ${launch_pam_mujoco} ${mujoco_id} with PID ${pids[-1]}"
done

if [ ! "$command_visualization" = "" ]; then
    ${command_visualization} &
    pids+=($!)
    echo "Run ${command_visualization} with PID ${pids[-1]}"
fi

# monitor processes until one of them terminates or Ctrl+C is pressed
shutdown_requested=0

function sigint_handler()
{
    echo "Initiate shutdown"
    shutdown_requested=1
}
trap sigint_handler SIGINT

# Disable exit on error from here on to prevent exiting without reaching the
# kill loop at the end.
set +e

echo "Start monitoring processes ${pids[@]}"
while [ ${shutdown_requested} == 0 ]; do
    for pid in "${pids[@]}"; do
        if ! ps -p ${pid} > /dev/null; then
            >&2 echo "Process ${pid} has died! Terminate other processes..."
            break 2
        fi
    done

    sleep 1
done

# Reaching here means that one of the monitored processes died or shutdown has
# been requested (e.g. via Ctrl+C).  Kill the rest and exit.
echo "processes to kill: ${pids[@]}"
for pid in "${pids[@]}"; do
    if ps -p ${pid} > /dev/null; then
        echo "Kill process ${pid}"
        kill ${pid} || true
    else
        echo "Process ${pid} already terminated"
    fi
done
