#!/usr/bin/env python3

import sys,os,json
import pam_interface
from lightargs import BrightArgs, FileExists
from learning_table_tennis_from_scratch.rewards import JsonReward
from learning_table_tennis_from_scratch.models import run_stable_baselines
from learning_table_tennis_from_scratch.models import run_openai_baselines
from learning_table_tennis_from_scratch.hysr_one_ball import HysrOneBallConfig
from learning_table_tennis_from_scratch.ppo_config import PPOConfig
from learning_table_tennis_from_scratch.ppo_config import OpenAIPPOConfig
from learning_table_tennis_from_scratch.jsonconfig import get_json_config


def _read_ppo_common_config(jsonpath):

    if not os.path.isfile(jsonpath):
            raise FileNotFoundError("failed to find reward configuration file: {}".format(jsonpath))
    try :
        with open(jsonpath) as f:
            conf=json.load(f)
    except Exception as e:
        raise ValueError("failed to parse reward json configuration file {}: {}".format(jsonpath,e))
    
    expected_keys = ("use_openai_baselines",
                     "log_episodes",
                     "log_tensorboard")

    for key in expected_keys:
        if not key in conf.keys():
            raise KeyError("failed to find key {} in {}".format(key,jsonpath))

    return conf
    

def _execute(reward_config_file,
             hysr_config_file,
             ppo_config_file,
             ppo_common_config_file):

    common_conf = _read_ppo_common_config(ppo_common_config_file)

    if common_conf["use_openai_baselines"]:
        run_openai_baselines(reward_config_file, hysr_config_file, ppo_config_file,
                             common_conf["log_episodes"], common_conf["log_tensorboard"])
    else:
        run_stable_baselines(reward_config_file, hysr_config_file, ppo_config_file,
                             common_conf["log_episodes"], common_conf["log_tensorboard"])

        


def _configure():
    files = get_json_config(expected_keys=["reward_config",
                                           "hysr_config",
                                           "ppo_config",
                                           "ppo_common_config"])
    
    return files


def _run():
    config = _configure()
    if config is None:
        return
    _execute(
        config["reward_config"],
        config["hysr_config"],
        config["ppo_config"],
        config["ppo_common_config"]
    )

if __name__ == "__main__":
    _run()
